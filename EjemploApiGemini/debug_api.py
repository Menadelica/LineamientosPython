#!/usr/bin/env python3
"""
Script de diagn√≥stico para verificar la configuraci√≥n de la API de Gemini
"""

import os
from dotenv import load_dotenv

def debug_api_config():
    print("üîç DIAGN√ìSTICO DE CONFIGURACI√≥N DE API GEMINI")
    print("=" * 50)
    
    # Verificar archivo .env
    env_exists = os.path.exists('.env')
    print(f"Archivo .env: {'‚úÖ Encontrado' if env_exists else '‚ùå No encontrado'}")
    
    if env_exists:
        with open('.env', 'r', encoding='utf-8') as f:
            has_key = 'GEMINI_API_KEY' in f.read()
            print(f"GEMINI_API_KEY en .env: {'‚úÖ S√≠' if has_key else '‚ùå No'}")
    
    # Cargar .env y verificar variable de entorno
    load_dotenv()
    api_key = os.environ.get('GEMINI_API_KEY')
    
    if not api_key:
        print("‚ùå GEMINI_API_KEY NO encontrada en variables de entorno")
        return
    
    print(f"‚úÖ GEMINI_API_KEY cargada: {api_key[:10]}...{api_key[-4:]}")
    print(f"üìè Longitud: {len(api_key)} caracteres")
    
    if api_key.startswith('AIza') and len(api_key) == 39:
        print("‚úÖ Formato correcto (Google API Key)")
    else:
        print("‚ö†Ô∏è Formato no est√°ndar para Google API Key")

    # Test b√°sico de conexi√≥n
    print("\nüîó Probando conexi√≥n con Gemini...")
    try:
        from google import genai
        client = genai.Client(api_key=api_key)
        
        # Test con modelo simple
        contents = [genai.types.Content(
            role="user",
            parts=[genai.types.Part.from_text("Hello")]
        )]
        
        models_to_try = ["gemini-2.0-flash-exp", "gemini-1.5-flash"]
        
        for model in models_to_try:
            try:
                response = list(client.models.generate_content_stream(
                    model=model,
                    contents=contents,
                    config=genai.types.GenerateContentConfig()
                ))
                if response:
                    print(f"‚úÖ API Key V√ÅLIDA con {model}")
                    print(f"üìù Respuesta: {response[0].text[:50]}...")
                    break
            except Exception:
                continue
        else:
            print("‚ùå No se pudo conectar con ning√∫n modelo")
            
    except ImportError:
        print("‚ùå M√≥dulo google.genai no disponible")
    except Exception as e:
        if "API key not valid" in str(e):
            print("‚ùå API Key NO V√ÅLIDA")
        elif "PERMISSION_DENIED" in str(e):
            print("‚ùå Sin permisos para usar la API")
        else:
            print(f"‚ùå Error: {e}")

    print("\nüéØ RECOMENDACIONES:")
    if not api_key or "demo_key" in api_key or "tu_clave" in api_key:
        print("1. Obt√©n una clave en: https://makersuite.google.com/app/apikey")
        print("2. Configura GEMINI_API_KEY en el archivo .env")
    else:
        print("1. Verifica que tu clave API est√© activa")
        print("2. Aseg√∫rate de tener cuota disponible")

if __name__ == "__main__":
    debug_api_config()
